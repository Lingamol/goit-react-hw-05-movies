{"version":3,"file":"static/js/548.c7210b4e.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Filter/Filter.Styled.jsx","components/Filter/Filter.jsx","components/Cast/Cast.jsx","services/api.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\nexport const Container = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n  padding: 0;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CardWrapper = styled.li`\n  cursor: pointer;\n  /* transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    box-shadow: 7px -7px 21px rgba(54, 80, 197, 0.6);\n  }\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n  } */\n  border: 1px solid black;\n  border-radius: 4px;\n\n  > a {\n    text-decoration: none;\n  }\n`;\nexport const ActorName = styled.p`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\nexport const ActorCharacter = styled.p`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  font-weight: lighter;\n  color: black;\n`;\nexport const CardImg = styled.img`\n  /* display: block; */\n  width: 100%;\n  height: 240px;\n`;\n","import styled from '@emotion/styled';\n// export const FilterWrapper = styled.div`\n//   /* border-radius: 5px;\n//   border: 2px solid blue; */\n// `;\nexport const FilterInputLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const FilterInput = styled.input`\n  margin-top: 10px;\n  width: 150px;\n`;\n","import PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport { FilterInputLabel, FilterInput } from './Filter.Styled';\nconst Filter = ({ filter, onChange }) => {\n  const inpuId = shortid.generate();\n  return (\n    <FilterInputLabel htmlFor={inpuId}>\n      Find actor by name\n      <FilterInput\n        placeholder=\"Input actor name\"\n        id={inpuId}\n        type=\"text\"\n        name=\"filter\"\n        onChange={event => {\n          onChange(event.target.value);\n        }}\n        value={filter}\n      />\n    </FilterInputLabel>\n  );\n};\nexport default Filter;\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport { useEffect, useMemo, useState } from 'react';\nimport { fetchDataById } from 'services/api';\nimport {\n  Container,\n  CardWrapper,\n  ActorName,\n  ActorCharacter,\n  CardImg,\n} from './Cast.styled';\nimport Filter from 'components/Filter';\n// import { Link } from 'react-router-dom';\nconst placeHolder =\n  'https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n  const [searchParams, setsearchParams] = useSearchParams();\n  const filterParam = searchParams.get('filter') ?? '';\n  console.log('searchParams.get(filter)', searchParams.get('filter'));\n  console.log('searchParams.get(query)', searchParams.get('query'));\n  console.log('searchParams from cast', searchParams);\n  useEffect(() => {\n    async function fetchMovieCast() {\n      const URL = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n      const API_PARAMS = {\n        api_key: 'ec8ea0b4348914be2279bac7c8ca37c4',\n        language: 'en-US',\n      };\n      try {\n        const data = await fetchDataById(URL, API_PARAMS);\n        if (data) {\n          setMovieCast(\n            data.cast.map(({ profile_path, name, character }) => {\n              return {\n                poster: profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : placeHolder,\n                name,\n                character,\n              };\n            })\n          );\n          // console.log('setmovieCast', data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchMovieCast();\n  }, [movieId]);\n  const onChange = value => {\n    setsearchParams(value !== '' ? { filter: value } : {});\n  };\n\n  const visibleActors = useMemo(() => {\n    const normalizedFilter = filterParam.toLocaleLowerCase();\n    return movieCast.filter(actor =>\n      actor.name.toLowerCase().includes(normalizedFilter)\n    );\n  }, [filterParam, movieCast]);\n\n  return movieCast.length > 0 ? (\n    <>\n      <Filter onChange={onChange} filter={filterParam} />\n      <Container>\n        {visibleActors.map(({ poster, name, character }) => {\n          return (\n            <CardWrapper key={name}>\n              <CardImg src={poster} alt={name} />\n              <ActorName>{name}</ActorName>\n              <ActorCharacter>Character: {character}</ActorCharacter>\n            </CardWrapper>\n          );\n        })}\n      </Container>\n    </>\n  ) : (\n    <p>We don't have any information about actors...</p>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\n// const params = {\n//   api_key: 'ec8ea0b4348914be2279bac7c8ca37c4',\n// };\n// let currentPage = 1;\n\nexport const fetchDayMovies = async (page = 1) => {\n  const url = `https://api.themoviedb.org/3/trending/movie/day?`;\n  const params = {\n    api_key: 'ec8ea0b4348914be2279bac7c8ca37c4',\n    page,\n  };\n  const response = await axios.get(url, { params });\n  // console.log('response.data.hits', response.data);\n  return response.data;\n};\nexport const fetchMovies = async (search, page) => {\n  console.log('search ', search);\n  const url = 'https://api.themoviedb.org/3/search/movie';\n  const params = {\n    api_key: 'ec8ea0b4348914be2279bac7c8ca37c4',\n    query: search,\n    page,\n  };\n  const response = await axios.get(url, { params });\n  // console.log('response.data.hits', response.data);\n  return response.data;\n};\nexport const fetchMoviesById = async id => {\n  // console.log('id ', id);\n  const url = `https://api.themoviedb.org/3/movie/${id}`;\n  const params = {\n    api_key: 'ec8ea0b4348914be2279bac7c8ca37c4',\n  };\n  const response = await axios.get(url, { params });\n  // console.log('response.data.hits', response.data);\n  return response.data;\n};\n\nexport const fetchDataById = async (url, params) => {\n  // console.log('id ', id);\n  // const url = `https://api.themoviedb.org/3/movie/${id}`;\n  // const params = {\n  //   api_key: 'ec8ea0b4348914be2279bac7c8ca37c4',\n  // };\n  const response = await axios.get(url, { params });\n  // console.log('response.data.hits', response.data);\n  return response.data;\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["Container","styled","CardWrapper","ActorName","ActorCharacter","CardImg","FilterInputLabel","FilterInput","filter","onChange","inpuId","shortid","htmlFor","placeholder","id","type","name","event","target","value","placeHolder","useState","movieCast","setMovieCast","movieId","useParams","useSearchParams","searchParams","setsearchParams","filterParam","get","console","log","useEffect","URL","API_PARAMS","api_key","language","fetchDataById","data","cast","map","profile_path","character","poster","fetchMovieCast","visibleActors","useMemo","normalizedFilter","toLocaleLowerCase","actor","toLowerCase","includes","length","src","alt","fetchDayMovies","page","url","params","axios","response","fetchMovies","search","query","fetchMoviesById","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","number","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","LN2","step"],"sourceRoot":""}